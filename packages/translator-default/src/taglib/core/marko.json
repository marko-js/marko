{
  "taglib-id": "marko-default-core",
  "<import>": {
    "node-factory": "./parse-import.js",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true,
      "relaxRequireCommas": true
    },
    "autocomplete": [
      {
        "displayText": "import <scope> from \"<path>\"",
        "description": "Use to import external modules, follows the same syntax as JavaScript imports.",
        "snippet": "import ${2} from \"${1:path}\"",
        "descriptionMoreURL": "https://markojs.com/docs/syntax/#importing-external-files"
      }
    ]
  },
  "<export>": {
    "node-factory": "./parse-export.js",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true,
      "relaxRequireCommas": true
    },
    "autocomplete": [
      {
        "displayText": "export <scope>",
        "description": "Use export additional data with the template, follows the same syntax as JavaScript exports.",
        "snippet": "export ${1}",
        "descriptionMoreURL": "https://markojs.com/docs/syntax/#importing-external-files"
      }
    ]
  },
  "<class>": {
    "node-factory": "./parse-class.js",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true
    },
    "autocomplete": [
      {
        "displayText": "class { /** lifecycle methods **/ }",
        "snippet": "class {\n\t$0\n}",
        "description": "A class containing the lifecycle methods, event handlers, and other properties for this component.",
        "descriptionMoreURL": "https://markojs.com/docs/class-components/#single-file-components"
      }
    ]
  },
  "<static>": {
    "node-factory": "./parse-static.js",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true
    },
    "autocomplete": [
      {
        "displayText": "static <statement>",
        "description": "A JavaScript statement which is only evaluated once your template is loaded.",
        "descriptionMoreURL": "https://markojs.com/docs/syntax/#static-javascript"
      }
    ]
  },
  "<style>": {
    "node-factory": "./parse-style.js",
    "transformer": "./transform-style.js",
    "parse-options": {
      "rawOpenTag": true
    }
  },
  "<macro>": {
    "node-factory": "./macro/parse.js",
    "code-generator": "./macro/translate.js",
    "@name": {
      "type": "string",
      "autocomplete": [
        {
          "description": "The name which can be used as a tag within a template."
        }
      ]
    },
    "autocomplete": [
      {
        "displayText": "macro|<params>| name=\"<name>\"",
        "description": "Creates a reusable fragment within the template.",
        "snippet": "macro|${2:param1, param2}| name=\"${1:name}\"",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#macro"
      }
    ]
  },
  "<include-text>": {
    "code-generator": "./translate-include-content.js",
    "attributes": {},
    "autocomplete": [
      {
        "displayText": "include-text(\"<path>\")",
        "description": "Allows you to inline the contents of a text file.",
        "snippet": "include-text(${1:\"./foo.txt\"})",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#include-text"
      }
    ]
  },
  "<include-html>": {
    "code-generator": "./translate-include-content.js",
    "attributes": {},
    "autocomplete": [
      {
        "displayText": "include-html(\"<path>\")",
        "snippet": "include-html(${1:\"./foo.html\"})",
        "description": "Allows you to inline the contents of an html file.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#include-html"
      }
    ]
  },
  "<if>": {
    "code-generator": "./conditional/translate-if.js",
    "attributes": {},
    "autocomplete": [
      {
        "snippet": "if(${1:condition})",
        "description": "Use to display content only if the condition is meant.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<else-if>": {
    "code-generator": "./conditional/translate-else-if.js",
    "attributes": {},
    "autocomplete": [
      {
        "snippet": "else-if(${1:condition})",
        "description": "Use after an <if> or <else-if> tag to display content if those conditions do not match and this one does.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<else>": {
    "code-generator": "./conditional/translate-else.js",
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use after an <if> or <else-if> tag to display content if those conditions do not match.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#if-else-if-else"
      }
    ]
  },
  "<for>": {
    "code-generator": "./translate-for.js",
    "@of": {
      "type": "expression",
      "autocomplete": [
        {
          "description": "Iterates over a list of items."
        }
      ]
    },
    "@in": {
      "type": "expression",
      "autocomplete": [
        {
          "description": "Iterates over the keys and values of an object."
        }
      ]
    },
    "@to": {
      "type": "number",
      "autocomplete": [
        {
          "description": "Iterates up to the provided number (inclusive)"
        }
      ]
    },
    "@from": {
      "type": "number",
      "autocomplete": [
        {
          "description": "Iterates starting from the provided number (inclusive)"
        }
      ]
    },
    "@step": {
      "type": "number",
      "autocomplete": [
        {
          "description": "The amount to increment during each interation (with from/to)"
        }
      ]
    },
    "autocomplete": [
      {
        "snippet": "for|${1:value, index}| of=${3:array}",
        "description": "Use to iterate over lists, object properties, or between ranges.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-over-a-list"
      },
      {
        "snippet": "for|${1:name, value}| in=${3:object}",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-over-an-objects-properties"
      },
      {
        "snippet": "for|${1:index}| from=${2:number} to=${3:number} step=${4:number}",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#iterating-between-a-range-of-numbers"
      }
    ]
  },
  "<while>": {
    "code-generator": "./translate-while.js",
    "autocomplete": [
      {
        "snippet": "while(${1:condition})",
        "description": "Renders the content multiple times until the condition is no longer met.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#while"
      }
    ]
  },
  "<html-comment>": {
    "code-generator": "./translate-html-comment.js",
    "parse-options": {
      "state": "parsed-text"
    },
    "attributes": {},
    "autocomplete": [
      {
        "description": "Use to create an html comment that is not stripped from the output.",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#html-comment"
      }
    ]
  },
  "<_preserve>": {
    "renderer": "marko/src/core-tags/components/preserve-tag",
    "@n": "boolean",
    "@i": "boolean",
    "@b": "boolean",
    "autocomplete": []
  },
  "<init-components>": {
    "code-generator": "./translate-server-only.js",
    "renderer": "marko/src/core-tags/components/init-components-tag.js",
    "@immediate": "boolean"
  },
  "<_preferred-script-location>": {
    "code-generator": "./translate-server-only.js",
    "renderer": "marko/src/core-tags/components/preferred-script-location-tag.js"
  },
  "<body>": {
    "code-generator": "./translate-body.js"
  },
  "<await>": {
    "renderer": "marko/src/core-tags/core/await/renderer.js",
    "code-generator": "./translate-await.js",
    "@_provider": "expression",
    "@_name": "string",
    "@name": {
      "type": "string",
      "autocomplete": [
        {
          "description": "Used to improve debugging and also to ensure promise ordering with the show-after attribute.",
          "snippet": "name=\"${1:name}\""
        }
      ]
    },
    "@timeout": {
      "type": "number",
      "autocomplete": [
        {
          "description": "An optional timeout that when reached will cause the promise to reject with a TimeoutError."
        }
      ]
    },
    "@client-reorder": {
      "type": "boolean",
      "autocomplete": [
        {
          "description": "If set anything after this promise will be sent out immediately, and reordered using JS in the browser."
        }
      ]
    },
    "@show-after": {
      "type": "string",
      "autocomplete": [
        {
          "description": "This attribute will ensure that (with client-reorder) this await tag will always show after another await tag with the provided name."
        }
      ]
    },
    "<then>": {
      "autocomplete": [
        {
          "displayText": "then|<result>|",
          "description": "Executed with the result of the resolved promise.",
          "snippet": "then|${1:result}|",
          "descriptionMoreURL": "https://markojs.com/docs/core-tags/#await"
        }
      ]
    },
    "<catch>": {
      "autocomplete": [
        {
          "displayText": "catch|<err>|",
          "description": "Executed with the err of the rejected promise.",
          "snippet": "catch|${1:err}|",
          "descriptionMoreURL": "https://markojs.com/docs/core-tags/#await"
        }
      ]
    },
    "<placeholder>": {
      "autocomplete": [
        {
          "description": "A placeholder to display while the promise is pending.",
          "descriptionMoreURL": "https://markojs.com/docs/core-tags/#await"
        }
      ]
    },
    "autocomplete": [
      {
        "displayText": "await(<promise>)",
        "description": "Used to render a template asynchronously with the results of a Promise",
        "snippet": "await(${1:promise})",
        "descriptionMoreURL": "https://markojs.com/docs/core-tags/#await"
      }
    ]
  },
  "<await-reorderer>": {
    "code-generator": "./translate-server-only.js",
    "renderer": "marko/src/core-tags/core/await/reorderer-renderer.js",
    "autocomplete": [
      {
        "snippet": "await-reorderer",
        "descriptionMoreURL": "http://markojs.com/docs/marko/async-taglib/#<code>&ltawait-reorderer><code>"
      }
    ]
  },
  "<__flush_here_and_after__>": {
    "code-generator": "./translate-server-only.js",
    "renderer": "marko/src/core-tags/core/__flush_here_and_after__.js"
  },
  "<module-code>": {
    "node-factory": "./parse-module-code",
    "parse-options": {
      "rootOnly": true,
      "rawOpenTag": true,
      "openTagOnly": true,
      "ignoreAttributes": true,
      "relaxRequireCommas": true
    }
  },
  "<*>": {
    "@key": {
      "type": "string",
      "preserve-name": true,
      "autocomplete": [
        {
          "displayText": "key=\"<method>\"",
          "snippet": "key=\"${1:method}\"",
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/get-started/#referencing-nested-components"
        },
        {
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/get-started/#referencing-nested-components"
        }
      ]
    },
    "@on*": {
      "pattern": true,
      "type": "statement",
      "allow-expressions": true,
      "preserve-name": true,
      "set-flag": "hasComponentEvents",
      "autocomplete": [
        {
          "displayText": "on<event>(\"<method>\")",
          "snippet": "on${1:Click}(\"handle${2:Button}${1:Click}\")",
          "descriptionMoreURL": "https://markojs.com/docs/components/#attaching-dom-event-listeners"
        }
      ]
    },
    "@once*": {
      "pattern": true,
      "type": "statement",
      "allow-expressions": true,
      "preserve-name": true,
      "set-flag": "hasComponentEvents",
      "autocomplete": {
        "displayText": "once<event>(\"<method>\")",
        "snippet": "once${1:Click}(\"handle${2:Button}${1:Click}\")",
        "descriptionMoreURL": "https://markojs.com/docs/components/#attaching-dom-event-listeners"
      }
    },
    "@no-update": {
      "type": "flag",
      "preserve-name": true,
      "autocomplete": [
        {
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render"
        }
      ]
    },
    "@no-update-body": {
      "type": "flag",
      "preserve-name": true,
      "autocomplete": [
        {
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render"
        }
      ]
    },
    "@no-update-if": {
      "preserve-name": true,
      "autocomplete": [
        {
          "snippet": "no-update-if(${1:condition})",
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render"
        }
      ]
    },
    "@no-update-body-if": {
      "preserve-name": true,
      "autocomplete": [
        {
          "snippet": "no-update-body-if(${1:condition})",
          "descriptionMoreURL": "http://markojs.com/docs/marko-components/#preserving-dom-nodes-during-re-render"
        }
      ]
    }
  }
}
